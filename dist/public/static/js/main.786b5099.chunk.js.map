{"version":3,"sources":["reducers/Main.ts","reducers/Common.ts","reducers/Tags.ts","reducers/Triggers.ts","reducers/Variables.ts","reducers/Root.ts","Router.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx","models/App.ts","models/Tags.ts","models/Triggers.ts","models/Variables.ts"],"names":["InitialState","isAddPanelVisible","isEditPanelVisible","isDeleteConfirmationDialogVisible","hasSelectedItem","emptyReducer","state","_","getCommonReducer","C","additionalReducer","action","type","selectedItem","payload","panelData","isPanelOpen","TagsInitialState","TagItem","TriggersInitialState","TriggerItem","VariablesInitialState","VariableItem","createStore","combineReducers","main","tags","triggers","variables","window","__REDUX_DEVTOOLS_EXTENSION__","name","Router","props","routes","map","rc","path","key","exact","component","to","Routes","Tags","getNavLinks","memoizeFunction","icon","url","link","connect","dispatch","onAddClick","onEditClick","onDeleteClick","onRouteChange","withRouter","React","selectedRoute","setSelectedRoute","setRoutes","headerName","setHeaderName","length","Promise","all","then","imports","i","default","className","Nav","groups","links","selectedKey","onLinkClick","navLink","history","push","CommandBar","items","text","iconProps","iconName","onClick","disabled","initializeIcons","App","store","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Status","obj","body","id","Object","assign","this"],"mappings":"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","file":"static/js/main.786b5099.chunk.js","sourcesContent":["import { IMTMAction } from \"../models/App\";\r\n\r\nexport const InitialState = {\r\n  isAddPanelVisible: false,\r\n  isEditPanelVisible: false,\r\n  isDeleteConfirmationDialogVisible: false,\r\n  hasSelectedItem: false\r\n};\r\n\r\nexport type MainState = typeof InitialState;\r\n\r\nexport const MainReducer = (\r\n  state = InitialState,\r\n  action: IMTMAction\r\n): MainState => {\r\n  switch (action.type) {\r\n    case \"onAddClick\":\r\n      return {\r\n        ...state,\r\n        isAddPanelVisible: true\r\n      };\r\n    case \"onEditClick\":\r\n      return {\r\n        ...state,\r\n        isEditPanelVisible: true\r\n      };\r\n\r\n    case \"onItemSelection\":\r\n      return {\r\n        ...state,\r\n        hasSelectedItem: true\r\n      };\r\n    case \"onRouteChange\":\r\n    case \"onResetItemSelection\":\r\n      return {\r\n        ...state,\r\n        hasSelectedItem: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { IMTMAction } from \"../models/App\";\r\nimport { IBase } from \"../models/Common\";\r\n\r\nconst emptyReducer = <S>(state: S, _: IMTMAction): S => state;\r\n\r\nexport const getCommonReducer = <T, S extends IBase<T>>(\r\n  C: new (item?: Partial<T>) => T,\r\n  additionalReducer = emptyReducer\r\n) => {\r\n  return (state: S, action: IMTMAction) => {\r\n    switch (action.type) {\r\n      case \"onItemSelection\":\r\n        return {\r\n          ...state,\r\n          selectedItem: new C(action.payload)\r\n        };\r\n      case \"onRouteChange\":\r\n      case \"onResetItemSelection\":\r\n        return {\r\n          ...state,\r\n          selectedItem: new C()\r\n        };\r\n      case \"onAddClick\":\r\n        return {\r\n          ...state,\r\n          panelData: new C(),\r\n          isPanelOpen: true\r\n        };\r\n      case \"onEditClick\":\r\n        return {\r\n          ...state,\r\n          panelData: new C(state.selectedItem),\r\n          isPanelOpen: true\r\n        };\r\n      case \"onCancelClick\":\r\n        return {\r\n          ...state,\r\n          isPanelOpen: false\r\n        };\r\n      case \"onDeleteClick\":\r\n        return {\r\n          ...state,\r\n          isDeleteConfirmationDialogVisible: true\r\n        };\r\n      case \"onDeleteDialogDismiss\":\r\n        return {\r\n          ...state,\r\n          isDeleteConfirmationDialogVisible: false\r\n        };\r\n      default:\r\n        return additionalReducer(state, action);\r\n    }\r\n  };\r\n};\r\n","import { IMTMAction } from \"../models/App\";\r\nimport { TagItem, ITagItem } from \"../models/Tags\";\r\nimport { getCommonReducer } from \"./Common\";\r\nimport { IBase } from \"../models/Common\";\r\n\r\nexport interface ITagsState extends IBase<ITagItem> {}\r\n\r\nexport const TagsInitialState: ITagsState = {\r\n  selectedItem: new TagItem(),\r\n  panelData: new TagItem(),\r\n  isPanelOpen: false,\r\n  isDeleteConfirmationDialogVisible: false\r\n};\r\n\r\nexport const TagsReducer = (\r\n  state = TagsInitialState,\r\n  action: IMTMAction\r\n): ITagsState => getCommonReducer<ITagItem, ITagsState>(TagItem)(state, action);\r\n","import { IMTMAction } from \"../models/App\";\r\nimport { ITriggerItem, TriggerItem } from \"../models/Triggers\";\r\nimport { IBase } from \"../models/Common\";\r\nimport { getCommonReducer } from \"./Common\";\r\n\r\nexport interface ITriggersState extends IBase<ITriggerItem> {}\r\n\r\nexport const TriggersInitialState: ITriggersState = {\r\n  selectedItem: new TriggerItem(),\r\n  panelData: new TriggerItem(),\r\n  isPanelOpen: false,\r\n  isDeleteConfirmationDialogVisible: false\r\n};\r\n\r\nexport const TriggersReducer = (\r\n  state = TriggersInitialState,\r\n  action: IMTMAction\r\n): ITriggersState =>\r\n  getCommonReducer<ITriggerItem, ITriggersState>(TriggerItem)(state, action);\r\n","import { IMTMAction } from \"../models/App\";\r\nimport { IVariableItem, VariableItem } from \"../models/Variables\";\r\nimport { IBase } from \"../models/Common\";\r\nimport { getCommonReducer } from \"./Common\";\r\n\r\nexport interface IVariablesState extends IBase<IVariableItem> {}\r\n\r\nexport const VariablesInitialState: IVariablesState = {\r\n  selectedItem: new VariableItem(),\r\n  panelData: new VariableItem(),\r\n  isPanelOpen: false,\r\n  isDeleteConfirmationDialogVisible: false\r\n};\r\n\r\nexport const VariablesReducer = (\r\n  state = VariablesInitialState,\r\n  action: IMTMAction\r\n): IVariablesState =>\r\n  getCommonReducer<IVariableItem, IVariablesState>(VariableItem)(state, action);\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { MainReducer, MainState } from \"./Main\";\r\nimport { TagsReducer, ITagsState } from \"./Tags\";\r\nimport { TriggersReducer, ITriggersState } from \"./Triggers\";\r\nimport { VariablesReducer, IVariablesState } from \"./Variables\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION__: Function;\r\n  }\r\n}\r\n\r\nexport interface IState {\r\n  main: MainState;\r\n  tags: ITagsState;\r\n  triggers: ITriggersState;\r\n  variables: IVariablesState;\r\n}\r\n\r\nexport default createStore<IState, any, any, any>(\r\n  combineReducers<IState>({\r\n    main: MainReducer,\r\n    tags: TagsReducer,\r\n    triggers: TriggersReducer,\r\n    variables: VariablesReducer\r\n  }),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__({ name: \"MTM\" })\r\n);\r\n","import * as React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { Routes, IRouteComponent } from \"./models/App\";\r\n\r\ninterface IRouterProps {\r\n  setSelectedRoute: (key: Routes) => void;\r\n  routes: IRouteComponent[];\r\n}\r\n\r\nconst Router: React.FC<IRouterProps> = (props: IRouterProps) => (\r\n  <>\r\n    {props.routes.map((rc: IRouteComponent) => (\r\n      <Route path={rc.key} exact component={rc.component} key={rc.key} />\r\n    ))}\r\n    <Redirect to={Routes.Tags} />\r\n  </>\r\n);\r\n\r\nexport default Router;\r\n","import * as React from \"react\";\r\nimport \"../App.css\";\r\nimport {\r\n  Nav,\r\n  INavLink,\r\n  memoizeFunction,\r\n  CommandBar\r\n} from \"office-ui-fabric-react\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport Router from \"../Router\";\r\nimport { IRouteComponent, Routes } from \"../models/App\";\r\nimport { connect } from \"react-redux\";\r\nimport { IState } from \"../reducers/Root\";\r\n\r\nconst getNavLinks = memoizeFunction((routes: IRouteComponent[]) =>\r\n  routes.map(\r\n    ({ name, key, icon }: IRouteComponent): INavLink => ({\r\n      name,\r\n      key,\r\n      icon,\r\n      url: \"\",\r\n      link: key\r\n    })\r\n  )\r\n);\r\n\r\nconst mapStateToProps = (state: IState) => state.main;\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  onAddClick: () => dispatch({ type: \"onAddClick\" }),\r\n  onEditClick: () => dispatch({ type: \"onEditClick\" }),\r\n  onDeleteClick: () => dispatch({ type: \"onDeleteClick\" }),\r\n  onRouteChange: () => dispatch({ type: \"onRouteChange\" })\r\n});\r\n\r\ninterface IMainProps\r\n  extends RouteComponentProps,\r\n    ReturnType<typeof mapStateToProps>,\r\n    ReturnType<typeof mapDispatchToProps> {}\r\n\r\nconst Main: React.FC<IMainProps> = (props: IMainProps) => {\r\n  const [selectedRoute, setSelectedRoute] = React.useState(Routes.Tags);\r\n  const [routes, setRoutes] = React.useState([] as IRouteComponent[]);\r\n  const [headerName, setHeaderName] = React.useState(\"Tags\");\r\n\r\n  React.useEffect(() => {\r\n    if (routes.length === 0) {\r\n      Promise.all([\r\n        import(\"./Tags/Tags\"),\r\n        import(\"./Triggers/Triggers\"),\r\n        import(\"./Variables/Variables\")\r\n      ]).then(imports => setRoutes(imports.map(i => i.default)));\r\n    }\r\n  }, [routes]);\r\n\r\n  const onLinkClick = (_?: React.MouseEvent, navLink?: INavLink) => {\r\n    props.history.push(navLink!.link);\r\n    setSelectedRoute(navLink!.link);\r\n    setHeaderName(navLink!.name);\r\n    props.onRouteChange();\r\n  };\r\n\r\n  return (\r\n    <main className=\"container\">\r\n      <aside className=\"nav-list-container\">\r\n        <Nav\r\n          groups={[{ links: getNavLinks(routes) }]}\r\n          selectedKey={selectedRoute}\r\n          onLinkClick={onLinkClick}\r\n        />\r\n      </aside>\r\n      <div className=\"page-container\">\r\n        <h2 className={\"header-padding\"}>{headerName}</h2>\r\n        <CommandBar\r\n          items={[\r\n            {\r\n              key: \"addRow\",\r\n              text: \"Add\",\r\n              iconProps: { iconName: \"Add\" },\r\n              onClick: () => props.onAddClick()\r\n            },\r\n            {\r\n              key: \"editRow\",\r\n              text: \"Edit\",\r\n              disabled: !props.hasSelectedItem,\r\n              iconProps: { iconName: \"Edit\" },\r\n              onClick: () => props.onEditClick()\r\n            },\r\n            {\r\n              key: \"deleteRow\",\r\n              text: \"Delete\",\r\n              disabled: !props.hasSelectedItem,\r\n              iconProps: { iconName: \"Trash\" },\r\n              onClick: () => props.onDeleteClick()\r\n            }\r\n          ]}\r\n        />\r\n        <Router\r\n          routes={routes}\r\n          setSelectedRoute={(key: Routes) => {\r\n            setSelectedRoute(key);\r\n            props.onRouteChange();\r\n          }}\r\n        ></Router>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Main));\r\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { initializeIcons } from \"office-ui-fabric-react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./reducers/Root\";\nimport Main from \"./components/Main\";\n\ninitializeIcons();\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <header>\n        <h1 className=\"header\">Microsoft Tag Manager</h1>\n      </header>\n      <Main />\n    </BrowserRouter>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export enum Routes {\r\n  Triggers = \"/triggers\",\r\n  Variables = \"/variables\",\r\n  Tags = \"/\"\r\n}\r\n\r\nexport interface IRouteComponent {\r\n  key: Routes;\r\n  name: string;\r\n  component: React.ComponentClass | React.FC;\r\n  icon: string;\r\n}\r\n\r\nexport interface IMTMAction<P = any> {\r\n  type: string;\r\n  payload?: P;\r\n}\r\n\r\nexport interface IWithId {\r\n  id: number;\r\n}\r\n\r\nexport enum Status {\r\n  NotYetStarted,\r\n  Loading,\r\n  Completed,\r\n  Failed\r\n}\r\n","import { IWithId } from \"./App\";\r\n\r\nexport interface ITagItem extends IWithId {\r\n  name: string;\r\n  body: string;\r\n  triggers: number[];\r\n}\r\n\r\nexport class TagItem implements ITagItem {\r\n  name = \"\";\r\n  body = \"\";\r\n  triggers = [];\r\n  id = -1;\r\n\r\n  constructor(obj: Partial<ITagItem> = {}) {\r\n    Object.assign<ITagItem, Partial<ITagItem>>(this, obj);\r\n  }\r\n}\r\n","import { IWithId } from \"./App\";\r\n\r\nexport interface ITriggerItem extends IWithId {\r\n  name: string;\r\n  type: string;\r\n  body: string;\r\n}\r\n\r\nexport class TriggerItem implements ITriggerItem {\r\n  name = \"\";\r\n  type = \"\";\r\n  body = \"\";\r\n  id = -1;\r\n\r\n  constructor(obj: Partial<ITriggerItem> = {}) {\r\n    Object.assign<ITriggerItem, Partial<ITriggerItem>>(this, obj);\r\n  }\r\n}\r\n","import { IWithId } from \"./App\";\r\n\r\nexport interface IVariableItem extends IWithId {\r\n  body: string;\r\n  name: string;\r\n  type: string;\r\n}\r\n\r\nexport class VariableItem implements IVariableItem {\r\n  body = \"\";\r\n  name = \"\";\r\n  type = \"\";\r\n  id = -1;\r\n\r\n  constructor(obj: Partial<IVariableItem> = {}) {\r\n    Object.assign<IVariableItem, Partial<IVariableItem>>(this, obj);\r\n  }\r\n}\r\n"],"sourceRoot":""}