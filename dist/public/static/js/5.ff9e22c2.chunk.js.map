{"version":3,"sources":["constants/Endpoints.ts","service/Api.ts","components/Presentational/MTMPanel.tsx","components/Presentational/MTMList.tsx","components/Presentational/MTMDialog.tsx","Utils.ts","components/Presentational/MTMTextField.tsx","components/Triggers/TriggerPanel.tsx","components/Triggers/Triggers.tsx"],"names":["Triggers","Tags","Variables","TriggersWithId","id","TagsWithId","VariablesWithId","headers","getList","url","C","fetch","method","then","response","json","map","item","deleteItem","createItem","body","JSON","stringify","updateItem","getTagsList","Endpoints","TagItem","deleteTagItem","saveTagItem","tagItem","getTriggersList","TriggerItem","deleteTriggersItem","saveTriggerItem","triggerItem","getVariablesList","VariableItem","deleteVariablesItem","saveVariablesItem","variablesItem","renderFooterContent","props","style","display","justifyContent","onClick","isActionInProgress","undefined","onSaveClick","styles","root","width","disabled","isFormValid","size","SpinnerSize","small","label","labelPosition","color","DefaultPalette","white","fontSize","FontSizes","medium","fontWeight","FontWeights","semibold","onCancelClick","connect","dispatch","type","isOpen","PanelType","main","padding","closeButtonAriaLabel","headerText","onDismiss","onRenderFooterContent","content","getColumns","memoizeFunction","partialColumns","partialColumn","index","key","toString","maxWidth","columnActionsMode","ColumnActionsMode","minWidth","minColumnWidth","isResizable","setSelectedItem","payload","resetSelectedItems","selection","Selection","onSelectionChanged","selectedItem","getSelection","items","className","columns","layoutMode","DetailsListLayoutMode","fixedColumns","selectionPreservedOnEmptyClick","selectionMode","SelectionMode","single","MTMDialog","hidden","isVisible","dialogContentProps","DialogType","normal","title","subText","modalProps","isBlocking","onConfirm","text","onCancel","DefaultWaitTime","debounce","func","timeout","wait","immediate","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","TextField","autoComplete","spellCheck","onChange","_","newValue","onValueChange","TriggerPanel","useState","name","setName","setType","Status","NotYetStarted","saveStatus","setSaveStatus","MTMTextField","maxLength","value","required","multiline","rows","readOnly","MTMPanel","Loading","Completed","refreshItems","catch","Failed","Boolean","fieldName","component","state","triggers","onDeleteDialogDismiss","setItems","fetchItems","useEffect","MTMList","isPanelOpen","isDeleteConfirmationDialogVisible","icon","Routes"],"mappings":"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","file":"static/js/5.ff9e22c2.chunk.js","sourcesContent":["// const HostPrefix = \"https://ms-tagmanager.azurewebsites.net\";\r\nconst HostPrefix = \"\";\r\n\r\nexport const Triggers = `${HostPrefix}/triggers`;\r\nexport const Tags = `${HostPrefix}/tags`;\r\nexport const Variables = `${HostPrefix}/variables`;\r\n\r\nexport const TriggersWithId = (id: number) => `${Triggers}/${id}`;\r\nexport const TagsWithId = (id: number) => `${Tags}/${id}`;\r\nexport const VariablesWithId = (id: number) => `${Variables}/${id}`;\r\n","import * as Endpoints from \"../constants/Endpoints\";\r\nimport { ITagItem, TagItem } from \"../models/Tags\";\r\nimport { IVariableItem, VariableItem } from \"../models/Variables\";\r\nimport { TriggerItem, ITriggerItem } from \"../models/Triggers\";\r\nimport { IWithId } from \"../models/App\";\r\n\r\nconst headers = {\r\n  \"Content-Type\": \"application/json\"\r\n};\r\n\r\nconst getList = <T>(url: string, C: new (item: T) => T) =>\r\n  fetch(url, { method: \"GET\" })\r\n    .then(response => response.json())\r\n    .then(response => (response as T[]).map((item: T) => new C(item)));\r\n\r\nconst deleteItem = (url: string) =>\r\n  fetch(url, {\r\n    method: \"DELETE\",\r\n    headers\r\n  });\r\n\r\nconst createItem = <T extends IWithId>(url: string, item: T) => {\r\n  delete item.id;\r\n  return fetch(url, {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(item)\r\n  });\r\n};\r\n\r\nconst updateItem = <T>(url: string, item: T) =>\r\n  fetch(url, {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(item)\r\n  });\r\n\r\n/* Tags */\r\nexport const getTagsList = () => getList<ITagItem>(Endpoints.Tags, TagItem);\r\n\r\nexport const deleteTagItem = (id: number) =>\r\n  deleteItem(Endpoints.TagsWithId(id));\r\n\r\nexport const saveTagItem = (tagItem: ITagItem) => {\r\n  if (tagItem.id === -1) {\r\n    return createItem<ITagItem>(Endpoints.Tags, tagItem);\r\n  }\r\n  return updateItem<ITagItem>(Endpoints.TagsWithId(tagItem.id), tagItem);\r\n};\r\n\r\n/* Triggers */\r\nexport const getTriggersList = () =>\r\n  getList<ITriggerItem>(Endpoints.Triggers, TriggerItem);\r\n\r\nexport const deleteTriggersItem = (id: number) =>\r\n  deleteItem(Endpoints.TriggersWithId(id));\r\n\r\nexport const saveTriggerItem = (triggerItem: ITriggerItem) => {\r\n  if (triggerItem.id === -1) {\r\n    return createItem<ITriggerItem>(Endpoints.Triggers, triggerItem);\r\n  }\r\n  return updateItem<ITriggerItem>(\r\n    Endpoints.TriggersWithId(triggerItem.id),\r\n    triggerItem\r\n  );\r\n};\r\n\r\n/* Variables */\r\nexport const getVariablesList = () =>\r\n  getList<IVariableItem>(Endpoints.Variables, VariableItem);\r\n\r\nexport const deleteVariablesItem = (id: number) =>\r\n  deleteItem(Endpoints.VariablesWithId(id));\r\n\r\nexport const saveVariablesItem = (variablesItem: ITriggerItem) => {\r\n  if (variablesItem.id === -1) {\r\n    return createItem<IVariableItem>(Endpoints.Variables, variablesItem);\r\n  }\r\n  return updateItem<IVariableItem>(\r\n    Endpoints.VariablesWithId(variablesItem.id),\r\n    variablesItem\r\n  );\r\n};\r\n","import {\r\n  PrimaryButton,\r\n  DefaultButton,\r\n  Panel,\r\n  Spinner,\r\n  SpinnerSize,\r\n  FontSizes,\r\n  DefaultPalette,\r\n  FontWeights,\r\n  PanelType\r\n} from \"office-ui-fabric-react\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  onCancelClick: () => dispatch({ type: \"onCancelClick\" })\r\n});\r\n\r\ninterface IMTMPanelProps extends ReturnType<typeof mapDispatchToProps> {\r\n  headerText: string;\r\n  isFormValid: boolean;\r\n  isActionInProgress: boolean;\r\n  content: JSX.Element;\r\n  onSaveClick(): void;\r\n}\r\n\r\nconst MTMPanel: React.FC<IMTMPanelProps> = (props: IMTMPanelProps) => (\r\n  <Panel\r\n    isOpen\r\n    type={PanelType.medium}\r\n    styles={{ main: { padding: \"10px 20px\" } }}\r\n    closeButtonAriaLabel=\"Close\"\r\n    headerText={props.headerText}\r\n    onDismiss={props.onCancelClick}\r\n    onRenderFooterContent={() => renderFooterContent(props)}\r\n  >\r\n    {props.content}\r\n  </Panel>\r\n);\r\n\r\nconst renderFooterContent = (props: IMTMPanelProps) => (\r\n  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n    <PrimaryButton\r\n      onClick={props.isActionInProgress ? undefined : props.onSaveClick}\r\n      styles={{ root: { width: 110 } }}\r\n      disabled={!props.isFormValid}\r\n    >\r\n      {props.isActionInProgress ? (\r\n        <Spinner\r\n          size={SpinnerSize.small}\r\n          label={\"Saving...\"}\r\n          labelPosition={\"left\"}\r\n          styles={{\r\n            label: {\r\n              color: DefaultPalette.white,\r\n              fontSize: FontSizes.medium,\r\n              fontWeight: FontWeights.semibold\r\n            }\r\n          }}\r\n        />\r\n      ) : (\r\n        \"Save\"\r\n      )}\r\n    </PrimaryButton>\r\n    <DefaultButton onClick={props.onCancelClick}>Cancel</DefaultButton>\r\n  </div>\r\n);\r\n\r\nexport default connect(null, mapDispatchToProps)(MTMPanel);\r\n","import {\r\n  DetailsList,\r\n  DetailsListLayoutMode,\r\n  SelectionMode,\r\n  IColumn,\r\n  Selection,\r\n  memoizeFunction,\r\n  ColumnActionsMode\r\n} from \"office-ui-fabric-react\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  setSelectedItem: (item: any) =>\r\n    dispatch({ type: \"onItemSelection\", payload: item }),\r\n  resetSelectedItems: () => dispatch({ type: \"onResetItemSelection\" })\r\n});\r\n\r\nexport type PartialColumn = Pick<\r\n  IColumn,\r\n  \"name\" | \"fieldName\" | \"onRender\" | \"isMultiline\"\r\n> & {\r\n  minColumnWidth?: number;\r\n};\r\ninterface IMTMListProps<T> extends ReturnType<typeof mapDispatchToProps> {\r\n  items: T[];\r\n  columns: PartialColumn[];\r\n}\r\n\r\nfunction MTMList<T>(props: IMTMListProps<T>) {\r\n  const selection = new Selection({\r\n    onSelectionChanged: () => {\r\n      const selectedItem = selection.getSelection()[0];\r\n      if (selectedItem) {\r\n        props.setSelectedItem(selectedItem as T);\r\n      } else {\r\n        props.resetSelectedItems();\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <DetailsList\r\n      items={props.items}\r\n      className={\"table-border\"}\r\n      columns={getColumns(props.columns)}\r\n      layoutMode={DetailsListLayoutMode.fixedColumns}\r\n      selectionPreservedOnEmptyClick\r\n      selectionMode={SelectionMode.single}\r\n      selection={selection}\r\n    />\r\n  );\r\n}\r\n\r\nconst getColumns = memoizeFunction(\r\n  (partialColumns: PartialColumn[]): IColumn[] =>\r\n    partialColumns.map((partialColumn: PartialColumn, index: number) => ({\r\n      key: index.toString(),\r\n      maxWidth: 300,\r\n      columnActionsMode: ColumnActionsMode.disabled,\r\n      minWidth: partialColumn.minColumnWidth || 300,\r\n      isResizable: true,\r\n      ...partialColumn\r\n    }))\r\n);\r\n\r\nexport default connect(null, mapDispatchToProps)(MTMList);\r\n","import React from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogType,\r\n  DialogFooter,\r\n  PrimaryButton,\r\n  DefaultButton\r\n} from \"office-ui-fabric-react\";\r\n\r\ninterface IMTMDialogProps {\r\n  isVisible: boolean;\r\n  onConfirm(): void;\r\n  onCancel(): void;\r\n}\r\n\r\nconst MTMDialog: React.FC<IMTMDialogProps> = (props: IMTMDialogProps) => (\r\n  <Dialog\r\n    hidden={!props.isVisible}\r\n    dialogContentProps={{\r\n      type: DialogType.normal,\r\n      title: \"Are you sure?\",\r\n      subText: \"Deleting will permanently remove this item.\"\r\n    }}\r\n    modalProps={{\r\n      styles: { main: { maxWidth: 450 } },\r\n      isBlocking: true\r\n    }}\r\n  >\r\n    <DialogFooter>\r\n      <PrimaryButton onClick={props.onConfirm} text=\"Yes\" />\r\n      <DefaultButton onClick={props.onCancel} text=\"No\" />\r\n    </DialogFooter>\r\n  </Dialog>\r\n);\r\n\r\nexport default MTMDialog;\r\n","const DefaultWaitTime = 10;\r\n\r\nexport function debounce(\r\n  func: any,\r\n  wait = DefaultWaitTime,\r\n  immediate = false\r\n): () => void {\r\n  let timeout: NodeJS.Timeout;\r\n  return function(this: any): void {\r\n    const context = this;\r\n    const args = arguments;\r\n    const later = () => {\r\n      if (!immediate) {\r\n        func.apply(context, args);\r\n      }\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) {\r\n      func.apply(context, args);\r\n    }\r\n  };\r\n}\r\n","import { ITextFieldProps, TextField } from \"office-ui-fabric-react\";\r\nimport React from \"react\";\r\nimport { debounce } from \"../../Utils\";\r\n\r\ninterface IMTMTextFieldProps extends ITextFieldProps {\r\n  onValueChange?(newValue: string): void;\r\n}\r\n\r\nexport default (props: IMTMTextFieldProps) => {\r\n  const onValueChange = (_: React.FormEvent, newValue = \"\") => {\r\n    if (props.onValueChange) {\r\n      props.onValueChange(newValue);\r\n    }\r\n  };\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      autoComplete={\"off\"}\r\n      styles={{ root: { padding: \"8px 0\" } }}\r\n      spellCheck={false}\r\n      onChange={debounce(onValueChange)}\r\n    />\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Status } from \"../../models/App\";\r\nimport { ITriggerItem } from \"../../models/Triggers\";\r\nimport MTMPanel from \"../Presentational/MTMPanel\";\r\nimport MTMTextField from \"../Presentational/MTMTextField\";\r\nimport { saveTriggerItem } from \"../../service/Api\";\r\n\r\ninterface ITriggerPanelProps extends ITriggerItem {\r\n  refreshItems(): void;\r\n}\r\n\r\nconst TriggerPanel: React.FC<ITriggerPanelProps> = (\r\n  props: ITriggerPanelProps\r\n) => {\r\n  const [name, setName] = useState(props.name);\r\n  const [type, setType] = useState(props.type);\r\n\r\n  const [saveStatus, setSaveStatus] = useState(Status.NotYetStarted);\r\n\r\n  const onSaveClick = () => {\r\n    setSaveStatus(Status.Loading);\r\n    const triggerItem = { name, type, body: props.body, id: props.id };\r\n    saveTriggerItem(triggerItem)\r\n      .then(() => setSaveStatus(Status.Completed))\r\n      .then(props.refreshItems)\r\n      .catch(() => setSaveStatus(Status.Failed));\r\n  };\r\n\r\n  const content = (\r\n    <>\r\n      <MTMTextField\r\n        label={\"Name\"}\r\n        maxLength={50}\r\n        value={name}\r\n        onValueChange={setName}\r\n        required\r\n      />\r\n      <MTMTextField\r\n        label={\"Event Type\"}\r\n        maxLength={50}\r\n        value={type}\r\n        onValueChange={setType}\r\n        required\r\n      />\r\n      <MTMTextField\r\n        label={\"Body\"}\r\n        value={props.body}\r\n        multiline\r\n        rows={4}\r\n        readOnly\r\n      />\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <MTMPanel\r\n      headerText={props.id === -1 ? \"Add Trigger\" : \"Edit Trigger\"}\r\n      onSaveClick={onSaveClick}\r\n      content={content}\r\n      isActionInProgress={saveStatus === Status.Loading}\r\n      isFormValid={Boolean(name) && Boolean(type)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TriggerPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { IRouteComponent, Routes } from \"../../models/App\";\r\nimport { connect } from \"react-redux\";\r\nimport { IState } from \"../../reducers/Root\";\r\nimport TriggerPanel from \"./TriggerPanel\";\r\nimport { ITriggersState } from \"../../reducers/Triggers\";\r\nimport { ITriggerItem } from \"../../models/Triggers\";\r\nimport MTMList, { PartialColumn } from \"../Presentational/MTMList\";\r\nimport { getTriggersList, deleteTriggersItem } from \"../../service/Api\";\r\nimport MTMDialog from \"../Presentational/MTMDialog\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst columns: PartialColumn[] = [\r\n  {\r\n    name: \"Name\",\r\n    fieldName: \"name\"\r\n  },\r\n  {\r\n    name: \"Event Type\",\r\n    fieldName: \"type\"\r\n  },\r\n  {\r\n    name: \"Body\",\r\n    fieldName: \"body\"\r\n  }\r\n];\r\n\r\nconst mapStateToProps = (state: IState) => state.triggers;\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  onDeleteDialogDismiss: () => dispatch({ type: \"onDeleteDialogDismiss\" })\r\n});\r\n\r\ninterface ITriggerProps\r\n  extends ITriggersState,\r\n    ReturnType<typeof mapDispatchToProps> {}\r\n\r\nconst Triggers: React.FC<ITriggerProps> = (props: ITriggerProps) => {\r\n  const [items, setItems] = useState([] as ITriggerItem[]);\r\n\r\n  const fetchItems = () => {\r\n    getTriggersList().then(setItems);\r\n  };\r\n\r\n  const deleteItem = () => {\r\n    deleteTriggersItem(props.selectedItem.id).then(fetchItems);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <MTMList items={items} columns={columns} />\r\n      {props.isPanelOpen && (\r\n        <TriggerPanel {...props.selectedItem} refreshItems={fetchItems} />\r\n      )}\r\n      <MTMDialog\r\n        onConfirm={() => {\r\n          deleteItem();\r\n          props.onDeleteDialogDismiss();\r\n        }}\r\n        onCancel={props.onDeleteDialogDismiss}\r\n        isVisible={props.isDeleteConfirmationDialogVisible}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default {\r\n  name: \"Triggers\",\r\n  component: connect(mapStateToProps, mapDispatchToProps)(Triggers),\r\n  icon: \"TriggerAuto\",\r\n  key: Routes.Triggers\r\n} as IRouteComponent;\r\n"],"sourceRoot":""}