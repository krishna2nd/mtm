{"version":3,"sources":["components/Presentational/MTMPanel.tsx","components/Presentational/MTMDialog.tsx","components/Presentational/MTMList.tsx","components/Common/RouteMain.tsx","constants/Endpoints.ts","service/Api.ts","Utils.ts","components/Presentational/MTMTextField.tsx","components/Triggers/TriggerPanel.tsx","components/Triggers/Triggers.tsx"],"names":["renderFooterContent","props","style","display","justifyContent","onClick","isActionInProgress","undefined","onSaveClick","styles","root","width","disabled","isFormValid","size","SpinnerSize","small","label","labelPosition","color","DefaultPalette","white","fontSize","FontSizes","medium","fontWeight","FontWeights","semibold","onPanelDismiss","borderColor","neutralQuaternary","connect","dispatch","type","isOpen","PanelType","main","padding","closeButtonAriaLabel","headerText","onDismiss","onRenderFooterContent","content","MTMDialog","isVisible","Dialog","hidden","dialogContentProps","DialogType","normal","title","subText","modalProps","maxWidth","isBlocking","DialogFooter","PrimaryButton","onConfirm","text","DefaultButton","onCancel","getColumns","memoizeFunction","partialColumns","map","partialColumn","index","key","toString","maxColumnWidth","columnActionsMode","ColumnActionsMode","minWidth","isResizable","setSelectedItem","item","payload","resetSelectedItems","selection","Selection","onSelectionChanged","selectedItem","getSelection","DetailsList","items","className","mergeStyles","border","neutralQuaternaryAlt","columns","layoutMode","DetailsListLayoutMode","fixedColumns","selectionPreservedOnEmptyClick","selectionMode","SelectionMode","single","onDeleteDialogDismiss","apiService","renderPanel","state","useState","setItems","Status","NotYetStarted","saveStatus","setSaveStatus","fetchItems","getList","then","useEffect","isPanelOpen","panelData","Loading","saveItem","Completed","catch","Failed","finally","deleteItem","id","isDeleteConfirmationDialogVisible","Triggers","Tags","Variables","headers","getServiceApi","listEndpoint","detailsEndpoint","C","url","fetch","method","response","json","body","JSON","stringify","createItem","updateItem","TagsApi","Endpoints","TagItem","TriggersApi","TriggerItem","VariablesApi","VariableItem","DefaultWaitTime","debounce","func","timeout","wait","immediate","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","TextField","autoComplete","value","defaultValue","fieldGroup","neutralTertiaryAlt","spellCheck","onChange","_","newValue","onValueChange","TriggerPanel","name","setName","setType","setBody","MTMTextField","maxLength","required","rows","multiline","MTMPanel","triggerItem","Boolean","fieldName","component","triggers","triggersState","RouteMain","icon","Routes"],"mappings":"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","file":"static/js/5.0d901a27.chunk.js","sourcesContent":["import {\r\n  DefaultButton,\r\n  DefaultPalette,\r\n  FontSizes,\r\n  FontWeights,\r\n  Panel,\r\n  PanelType,\r\n  PrimaryButton,\r\n  Spinner,\r\n  SpinnerSize\r\n} from 'office-ui-fabric-react';\r\nimport React, { FC } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  onPanelDismiss: () => dispatch({ type: 'onPanelDismiss' })\r\n});\r\n\r\ninterface IMTMPanelProps extends ReturnType<typeof mapDispatchToProps> {\r\n  headerText: string;\r\n  isFormValid: boolean;\r\n  isActionInProgress: boolean;\r\n  content: JSX.Element;\r\n  onSaveClick(): void;\r\n}\r\n\r\nconst MTMPanel: FC<IMTMPanelProps> = (props: IMTMPanelProps) => (\r\n  <Panel\r\n    isOpen\r\n    type={PanelType.medium}\r\n    styles={{ main: { padding: '10px 20px' } }}\r\n    closeButtonAriaLabel=\"Close\"\r\n    headerText={props.headerText}\r\n    onDismiss={props.onPanelDismiss}\r\n    onRenderFooterContent={() => renderFooterContent(props)}\r\n  >\r\n    {props.content}\r\n  </Panel>\r\n);\r\n\r\nconst renderFooterContent = (props: IMTMPanelProps) => (\r\n  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n    <PrimaryButton\r\n      onClick={props.isActionInProgress ? undefined : props.onSaveClick}\r\n      styles={{ root: { width: 110 } }}\r\n      disabled={!props.isFormValid}\r\n    >\r\n      {props.isActionInProgress ? (\r\n        <Spinner\r\n          size={SpinnerSize.small}\r\n          label={'Saving...'}\r\n          labelPosition={'left'}\r\n          styles={{\r\n            label: {\r\n              color: DefaultPalette.white,\r\n              fontSize: FontSizes.medium,\r\n              fontWeight: FontWeights.semibold\r\n            }\r\n          }}\r\n        />\r\n      ) : (\r\n        'Save'\r\n      )}\r\n    </PrimaryButton>\r\n    <DefaultButton\r\n      onClick={props.onPanelDismiss}\r\n      styles={{ root: { borderColor: DefaultPalette.neutralQuaternary } }}\r\n    >\r\n      Cancel\r\n    </DefaultButton>\r\n  </div>\r\n);\r\n\r\nexport default connect(null, mapDispatchToProps)(MTMPanel);\r\n","import {\r\n  DefaultButton,\r\n  Dialog,\r\n  DialogFooter,\r\n  DialogType,\r\n  PrimaryButton\r\n} from 'office-ui-fabric-react';\r\nimport React, { FC } from 'react';\r\n\r\ninterface IMTMDialogProps {\r\n  isVisible: boolean;\r\n  onConfirm(): void;\r\n  onCancel(): void;\r\n}\r\n\r\nconst MTMDialog: FC<IMTMDialogProps> = (props: IMTMDialogProps) => {\r\n  if (!props.isVisible) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Dialog\r\n      hidden={false}\r\n      dialogContentProps={{\r\n        type: DialogType.normal,\r\n        title: 'Are you sure?',\r\n        subText: 'Deleting will permanently remove this item.'\r\n      }}\r\n      modalProps={{\r\n        styles: { main: { maxWidth: 450 } },\r\n        isBlocking: true\r\n      }}\r\n    >\r\n      <DialogFooter>\r\n        <PrimaryButton onClick={props.onConfirm} text={'Yes'} />\r\n        <DefaultButton onClick={props.onCancel} text={'No'} />\r\n      </DialogFooter>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default MTMDialog;\r\n","import {\r\n  ColumnActionsMode,\r\n  DefaultPalette,\r\n  DetailsList,\r\n  DetailsListLayoutMode,\r\n  IColumn,\r\n  memoizeFunction,\r\n  mergeStyles,\r\n  Selection,\r\n  SelectionMode\r\n} from 'office-ui-fabric-react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  /* tslint:disable-next-line:no-any */\r\n  setSelectedItem: (item: any) =>\r\n    dispatch({ type: 'onItemSelection', payload: item }),\r\n  resetSelectedItems: () => dispatch({ type: 'onResetItemSelection' })\r\n});\r\n\r\nexport type PartialColumn = Pick<\r\n  IColumn,\r\n  'name' | 'fieldName' | 'onRender' | 'isMultiline'\r\n> & {\r\n  maxColumnWidth?: number;\r\n};\r\n\r\ninterface IMTMListProps<T> extends ReturnType<typeof mapDispatchToProps> {\r\n  items: T[];\r\n  columns: PartialColumn[];\r\n}\r\n\r\nfunction MTMList<T>(props: IMTMListProps<T>) {\r\n  const selection = new Selection({\r\n    onSelectionChanged: () => {\r\n      const selectedItem = selection.getSelection()[0];\r\n      if (selectedItem) {\r\n        props.setSelectedItem(selectedItem as T);\r\n      } else {\r\n        props.resetSelectedItems();\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <DetailsList\r\n      items={props.items}\r\n      className={mergeStyles({\r\n        border: '0px solid',\r\n        borderColor: DefaultPalette.neutralQuaternaryAlt\r\n      })}\r\n      columns={getColumns(props.columns)}\r\n      layoutMode={DetailsListLayoutMode.fixedColumns}\r\n      selectionPreservedOnEmptyClick={true}\r\n      selectionMode={SelectionMode.single}\r\n      selection={selection}\r\n    />\r\n  );\r\n}\r\n\r\nconst getColumns = memoizeFunction(\r\n  (partialColumns: PartialColumn[]): IColumn[] =>\r\n    partialColumns.map((partialColumn: PartialColumn, index: number) => ({\r\n      key: index.toString(),\r\n      maxWidth: partialColumn.maxColumnWidth || 300,\r\n      columnActionsMode: ColumnActionsMode.disabled,\r\n      minWidth: 200,\r\n      isResizable: true,\r\n      ...partialColumn\r\n    }))\r\n);\r\n\r\nexport default connect(null, mapDispatchToProps)(MTMList);\r\n","import MTMDialog from 'components/Presentational/MTMDialog';\r\nimport MTMList, { PartialColumn } from 'components/Presentational/MTMList';\r\nimport { IWithId, Status } from 'models/App';\r\nimport { IBase, IService } from 'models/Common';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  onDeleteDialogDismiss: () => dispatch({ type: 'onDeleteDialogDismiss' }),\r\n  onPanelDismiss: () => dispatch({ type: 'onPanelDismiss' })\r\n});\r\n\r\ninterface IRouteMainProps<T> extends ReturnType<typeof mapDispatchToProps> {\r\n  columns: PartialColumn[];\r\n  state: IBase<T>;\r\n  apiService: IService<T>;\r\n  renderPanel(\r\n    panelData: T,\r\n    saveItem: (item: T) => void,\r\n    saveStatus: Status\r\n  ): JSX.Element;\r\n}\r\n\r\nfunction RouteMain<T extends IWithId>(props: IRouteMainProps<T>) {\r\n  const {\r\n    apiService,\r\n    columns,\r\n    onDeleteDialogDismiss,\r\n    onPanelDismiss,\r\n    renderPanel,\r\n    state\r\n  } = props;\r\n  const [items, setItems] = useState([] as T[]);\r\n  const [saveStatus, setSaveStatus] = useState(Status.NotYetStarted);\r\n\r\n  const fetchItems = () => {\r\n    apiService.getList().then(setItems);\r\n  };\r\n\r\n  const deleteItem = () => {\r\n    apiService.deleteItem(state.selectedItem.id).then(fetchItems);\r\n  };\r\n\r\n  const saveItem = (item: T) => {\r\n    setSaveStatus(Status.Loading);\r\n    apiService\r\n      .saveItem(item)\r\n      .then(() => setSaveStatus(Status.Completed))\r\n      .then(fetchItems)\r\n      .catch(() => setSaveStatus(Status.Failed))\r\n      .finally(onPanelDismiss);\r\n  };\r\n\r\n  const onDeleteConfirmation = () => {\r\n    deleteItem();\r\n    onDeleteDialogDismiss();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <MTMList items={items} columns={columns} />\r\n      {state.isPanelOpen && renderPanel(state.panelData, saveItem, saveStatus)}\r\n      <MTMDialog\r\n        onConfirm={onDeleteConfirmation}\r\n        onCancel={onDeleteDialogDismiss}\r\n        isVisible={state.isDeleteConfirmationDialogVisible}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(RouteMain);\r\n","// const HostPrefix = \"https://ms-tagmanager.azurewebsites.net\";\r\nconst HostPrefix = \"\";\r\n\r\nexport const Triggers = `${HostPrefix}/triggers`;\r\nexport const Tags = `${HostPrefix}/tags`;\r\nexport const Variables = `${HostPrefix}/variables`;\r\n\r\nexport const TriggersWithId = (id: number) => `${Triggers}/${id}`;\r\nexport const TagsWithId = (id: number) => `${Tags}/${id}`;\r\nexport const VariablesWithId = (id: number) => `${Variables}/${id}`;\r\n","import * as Endpoints from 'constants/Endpoints';\r\nimport { IWithId } from 'models/App';\r\nimport { IService } from 'models/Common';\r\nimport { ITagItem, TagItem } from 'models/Tags';\r\nimport { ITriggerItem, TriggerItem } from 'models/Triggers';\r\nimport { IVariableItem, VariableItem } from 'models/Variables';\r\n\r\nconst headers = {\r\n  'Content-Type': 'application/json'\r\n};\r\n\r\nconst getList = <T>(url: string, C: new (item: T) => T) =>\r\n  fetch(url, { method: 'GET' })\r\n    .then(response => response.json())\r\n    .then(response => (response as T[]).map((item: T) => new C(item)));\r\n\r\nconst deleteItem = (url: string) =>\r\n  fetch(url, {\r\n    method: 'DELETE',\r\n    headers\r\n  });\r\n\r\nconst createItem = <T extends IWithId>(url: string, item: T) => {\r\n  delete item.id;\r\n  return fetch(url, {\r\n    method: 'PUT',\r\n    headers,\r\n    body: JSON.stringify(item)\r\n  });\r\n};\r\n\r\nconst updateItem = <T>(url: string, item: T) =>\r\n  fetch(url, {\r\n    method: 'POST',\r\n    headers,\r\n    body: JSON.stringify(item)\r\n  });\r\n\r\nconst getServiceApi = <T extends IWithId>(\r\n  listEndpoint: string,\r\n  detailsEndpoint: (id: number) => string,\r\n  C: new () => T\r\n): IService<T> => ({\r\n  getList: () => getList<T>(listEndpoint, C),\r\n  deleteItem: (id: number) => deleteItem(detailsEndpoint(id)),\r\n  saveItem: (item: T) => {\r\n    if (item.id === -1) {\r\n      return createItem<T>(listEndpoint, item);\r\n    }\r\n    return updateItem<T>(detailsEndpoint(item.id), item);\r\n  }\r\n});\r\n\r\nexport const TagsApi = getServiceApi<ITagItem>(\r\n  Endpoints.Tags,\r\n  Endpoints.TagsWithId,\r\n  TagItem\r\n);\r\n\r\nexport const TriggersApi = getServiceApi<ITriggerItem>(\r\n  Endpoints.Triggers,\r\n  Endpoints.TriggersWithId,\r\n  TriggerItem\r\n);\r\n\r\nexport const VariablesApi = getServiceApi<IVariableItem>(\r\n  Endpoints.Variables,\r\n  Endpoints.VariablesWithId,\r\n  VariableItem\r\n);\r\n","const DefaultWaitTime = 10;\r\n\r\nexport function debounce(\r\n  func: any,\r\n  wait = DefaultWaitTime,\r\n  immediate = false\r\n): () => void {\r\n  let timeout: NodeJS.Timeout;\r\n  return function(this: any): void {\r\n    const context = this;\r\n    const args = arguments;\r\n    const later = () => {\r\n      if (!immediate) {\r\n        func.apply(context, args);\r\n      }\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) {\r\n      func.apply(context, args);\r\n    }\r\n  };\r\n}\r\n","import {\r\n  DefaultPalette,\r\n  ITextFieldProps,\r\n  TextField\r\n} from 'office-ui-fabric-react';\r\nimport React, { FormEvent } from 'react';\r\nimport { debounce } from 'Utils';\r\n\r\ninterface IMTMTextFieldProps extends ITextFieldProps {\r\n  onValueChange?(newValue: string): void;\r\n}\r\n\r\nexport default (props: IMTMTextFieldProps) => {\r\n  const onValueChange = (_: FormEvent, newValue = '') => {\r\n    if (props.onValueChange) {\r\n      props.onValueChange(newValue);\r\n    }\r\n  };\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      autoComplete={'off'}\r\n      value={undefined}\r\n      defaultValue={props.value}\r\n      styles={{\r\n        root: { padding: '8px 0' },\r\n        fieldGroup: { borderColor: DefaultPalette.neutralTertiaryAlt }\r\n      }}\r\n      spellCheck={false}\r\n      onChange={debounce(onValueChange)}\r\n    />\r\n  );\r\n};\r\n","import MTMPanel from 'components/Presentational/MTMPanel';\r\nimport MTMTextField from 'components/Presentational/MTMTextField';\r\nimport { Status } from 'models/App';\r\nimport { ITriggerItem } from 'models/Triggers';\r\nimport React, { FC, useState } from 'react';\r\n\r\ninterface ITriggerPanelProps extends ITriggerItem {\r\n  saveItem(item: ITriggerItem): void;\r\n  saveStatus: Status;\r\n}\r\n\r\nconst TriggerPanel: FC<ITriggerPanelProps> = (props: ITriggerPanelProps) => {\r\n  const [name, setName] = useState(props.name);\r\n  const [type, setType] = useState(props.type);\r\n  const [body, setBody] = useState(props.body);\r\n\r\n  const onSaveClick = () => {\r\n    const triggerItem = { name, type, body, id: props.id };\r\n    props.saveItem(triggerItem);\r\n  };\r\n\r\n  const content = (\r\n    <>\r\n      <MTMTextField\r\n        label={'Name'}\r\n        maxLength={50}\r\n        value={name}\r\n        onValueChange={setName}\r\n        required\r\n      />\r\n      <MTMTextField\r\n        label={'Event Type'}\r\n        maxLength={50}\r\n        value={type}\r\n        onValueChange={setType}\r\n        required\r\n      />\r\n      <MTMTextField\r\n        label={'Body'}\r\n        value={body}\r\n        onValueChange={setBody}\r\n        rows={4}\r\n        multiline\r\n      />\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <MTMPanel\r\n      headerText={props.id === -1 ? 'Add Trigger' : 'Edit Trigger'}\r\n      onSaveClick={onSaveClick}\r\n      content={content}\r\n      isActionInProgress={props.saveStatus === Status.Loading}\r\n      isFormValid={Boolean(name) && Boolean(type)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TriggerPanel;\r\n","import RouteMain from 'components/Common/RouteMain';\r\nimport { PartialColumn } from 'components/Presentational/MTMList';\r\nimport { IRouteComponent, Routes, Status } from 'models/App';\r\nimport { ITriggerItem } from 'models/Triggers';\r\nimport React, { FC } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IState } from 'reducers/Root';\r\nimport { ITriggersState } from 'reducers/Triggers';\r\nimport { TriggersApi } from 'service/Api';\r\n\r\nimport TriggerPanel from './TriggerPanel';\r\n\r\nconst columns: PartialColumn[] = [\r\n  {\r\n    name: 'Name',\r\n    fieldName: 'name'\r\n  },\r\n  {\r\n    name: 'Event Type',\r\n    fieldName: 'type'\r\n  },\r\n  {\r\n    name: 'Body',\r\n    fieldName: 'body'\r\n  }\r\n];\r\n\r\nconst mapStateToProps = (state: IState) => state.triggers;\r\n\r\nconst Triggers: FC<ITriggersState> = (triggersState: ITriggersState) => {\r\n  return (\r\n    <RouteMain\r\n      renderPanel={renderPanel}\r\n      apiService={TriggersApi}\r\n      state={triggersState}\r\n      columns={columns}\r\n    />\r\n  );\r\n};\r\n\r\nconst renderPanel = (\r\n  panelData: ITriggerItem,\r\n  saveItem: (item: ITriggerItem) => void,\r\n  saveStatus: Status\r\n) => (\r\n  <TriggerPanel {...panelData} saveItem={saveItem} saveStatus={saveStatus} />\r\n);\r\n\r\nexport default {\r\n  name: 'Triggers',\r\n  component: connect(mapStateToProps)(Triggers),\r\n  icon: 'TriggerAuto',\r\n  key: Routes.Triggers\r\n} as IRouteComponent;\r\n"],"sourceRoot":""}