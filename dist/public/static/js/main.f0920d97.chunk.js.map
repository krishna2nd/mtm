{"version":3,"sources":["components/Router.tsx","components/AppStart.tsx","reducers/Main.ts","reducers/Common.ts","reducers/Tags.ts","reducers/Triggers.ts","reducers/Variables.ts","reducers/Root.ts","App.tsx","serviceWorker.ts","index.tsx","models/App.ts","models/Variables.ts","models/Tags.ts","models/Triggers.ts"],"names":["props","routes","map","rc","path","key","exact","component","to","Routes","Tags","getNavLinks","memoizeFunction","name","icon","url","link","connect","state","main","dispatch","onAddClick","type","onEditClick","onDeleteClick","onRouteChange","withRouter","useState","selectedRoute","setSelectedRoute","setRoutes","headerName","setHeaderName","useEffect","Promise","all","then","imports","i","default","className","mergeStyles","textAlign","borderBottom","borderColor","DefaultPalette","neutralQuaternaryAlt","display","height","overflow","flexBasis","borderRight","Nav","groups","links","selectedKey","onLinkClick","_","navLink","history","push","flex","paddingLeft","CommandBar","items","text","iconProps","iconName","onClick","disabled","hasSelectedItem","Router","InitialState","isAddPanelVisible","isEditPanelVisible","isDeleteConfirmationDialogVisible","emptyReducer","getCommonReducer","C","additionalReducer","action","selectedItem","payload","panelData","isPanelOpen","TagsInitialState","TagItem","TriggersInitialState","TriggerItem","VariablesInitialState","VariableItem","createStore","combineReducers","tags","triggers","variables","window","__REDUX_DEVTOOLS_EXTENSION__","initializeIcons","document","title","Boolean","location","hostname","match","ReactDOM","render","store","AppStart","getElementById","navigator","serviceWorker","ready","registration","unregister","Status","obj","body","id","Object","assign","this","VariableTypes"],"mappings":"mQASe,WAACA,GAAD,OACb,oCACGA,EAAMC,OAAOC,KAAI,SAACC,GAAD,OAChB,kBAAC,IAAD,CAAOC,KAAMD,EAAGE,IAAKC,OAAK,EAACC,UAAWJ,EAAGI,UAAWF,IAAKF,EAAGE,SAE9D,kBAAC,IAAD,CAAUG,GAAIC,IAAOC,SCGnBC,EAAcC,aAAgB,SAACX,GAAD,OAClCA,EAAOC,KACL,gBAAGW,EAAH,EAAGA,KAAMR,EAAT,EAASA,IAAT,MAAqD,CACnDQ,OACAR,MACAS,KAHF,EAAcA,KAIZC,IAAK,GACLC,KAAMX,SAyHGY,eApHS,SAACC,GAAD,OAAmBA,EAAMC,QAEtB,SAACC,GAAD,MAAyB,CAClDC,WAAY,kBAAMD,EAAS,CAAEE,KAAM,gBACnCC,YAAa,kBAAMH,EAAS,CAAEE,KAAM,iBACpCE,cAAe,kBAAMJ,EAAS,CAAEE,KAAM,mBACtCG,cAAe,kBAAML,EAAS,CAAEE,KAAM,sBA8GzBL,CAA6CS,aAtG/B,SAAC1B,GAAuB,IAAD,EACR2B,mBAASlB,IAAOC,MADR,mBAC3CkB,EAD2C,KAC5BC,EAD4B,OAEtBF,mBAAS,IAFa,mBAE3C1B,EAF2C,KAEnC6B,EAFmC,OAGdH,mBAAS,QAHK,mBAG3CI,EAH2C,KAG/BC,EAH+B,KAKlDC,qBAAU,WACRC,QAAQC,IAAI,CACV,oDACA,oDACA,6DACCC,MAAK,SAAAC,GAAO,OAAIP,EAAUO,EAAQnC,KAAI,SAAAoC,GAAC,OAAIA,EAAEC,iBAC/C,IASH,OACE,oCACE,4BACEC,UAAWC,YAAY,CACrBC,UAAW,SACXC,aAAc,YACdC,YAAaC,IAAeC,wBAG9B,gDAEF,0BACEN,UAAWC,YAAY,CACrBM,QAAS,OACTC,OAAQ,QACRC,SAAU,YAGZ,2BACET,UAAWC,YAAY,CACrBS,UAAW,MACXC,YAAa,YACbP,YAAaC,IAAeC,wBAG9B,kBAACM,EAAA,EAAD,CACEC,OAAQ,CAAC,CAAEC,MAAO3C,EAAYV,KAC9BsD,YAAa3B,EACb4B,YAnCU,SAACC,EAAgBC,GACnC1D,EAAM2D,QAAQC,KAAKF,EAAS1C,MAC5Ba,EAAiB6B,EAAS1C,MAC1BgB,EAAc0B,EAAS7C,MACvBb,EAAMyB,oBAkCF,yBACEe,UAAWC,YAAY,CACrBoB,KAAM,EACNlB,aAAc,YACdC,YAAaC,IAAeC,wBAG9B,wBAAIN,UAAWC,YAAY,CAAEqB,YAAa,UAAY/B,GACtD,kBAACgC,EAAA,EAAD,CACEC,MAAO,CACL,CACE3D,IAAK,SACL4D,KAAM,MACNC,UAAW,CAAEC,SAAU,OACvBC,QAAS,WACPpE,EAAMqB,eAGV,CACEhB,IAAK,UACL4D,KAAM,OACNI,UAAWrE,EAAMsE,gBACjBJ,UAAW,CAAEC,SAAU,QACvBC,QAAS,WACPpE,EAAMuB,gBAGV,CACElB,IAAK,YACL4D,KAAM,SACNI,UAAWrE,EAAMsE,gBACjBJ,UAAW,CAAEC,SAAU,SACvBC,QAAS,WACPpE,EAAMwB,qBAKd,kBAAC+C,EAAD,CACEtE,OAAQA,EACR4B,iBAAkB,SAACxB,GACjBwB,EAAiBxB,GACjBL,EAAMyB,0B,0lBCtIb,IAAM+C,EAAe,CAC1BC,mBAAmB,EACnBC,oBAAoB,EACpBC,mCAAmC,EACnCL,iBAAiB,G,ikBCHnB,IAAMM,EAAe,SAAI1D,EAAUuC,GAAd,OAAmCvC,GAE3C2D,EAAmB,SAC9BC,GAEI,IADJC,EACG,uDADiBH,EAEpB,OAAO,SAAC1D,EAAU8D,GAChB,OAAQA,EAAO1D,MACb,IAAK,kBACH,OAAO,KACFJ,EADL,CAEE+D,aAAc,IAAIH,EAAEE,EAAOE,WAE/B,IAAK,gBACL,IAAK,uBACH,OAAO,KACFhE,EADL,CAEE+D,aAAc,IAAIH,IAEtB,IAAK,aACH,OAAO,KACF5D,EADL,CAEEiE,UAAW,IAAIL,EACfM,aAAa,IAEjB,IAAK,cACH,OAAO,KACFlE,EADL,CAEEiE,UAAW,IAAIL,EAAE5D,EAAM+D,cACvBG,aAAa,IAEjB,IAAK,iBACH,OAAO,KACFlE,EADL,CAEEkE,aAAa,IAEjB,IAAK,gBACH,OAAO,KACFlE,EADL,CAEEyD,mCAAmC,IAEvC,IAAK,wBACH,OAAO,KACFzD,EADL,CAEEyD,mCAAmC,IAEvC,QACE,OAAOI,EAAkB7D,EAAO8D,MC1ClCK,EAA+B,CACnCJ,aAAc,IAAIK,IAClBH,UAAW,IAAIG,IACfF,aAAa,EACbT,mCAAmC,G,QCJ/BY,EAAuC,CAC3CN,aAAc,IAAIO,IAClBL,UAAW,IAAIK,IACfJ,aAAa,EACbT,mCAAmC,G,QCJ/Bc,EAAyC,CAC7CR,aAAc,IAAIS,IAClBP,UAAW,IAAIO,IACfN,aAAa,EACbT,mCAAmC,GCStBgB,cACbC,YAAwB,CACtBzE,KLZuB,WAGV,IAFfD,EAEc,uDAFNsD,EACRQ,EACc,uCACd,OAAQA,EAAO1D,MACb,IAAK,aACH,OAAO,EAAP,GACKJ,EADL,CAEEuD,mBAAmB,IAEvB,IAAK,cACH,OAAO,EAAP,GACKvD,EADL,CAEEwD,oBAAoB,IAGxB,IAAK,kBACH,OAAO,EAAP,GACKxD,EADL,CAEEoD,iBAAiB,IAErB,IAAK,gBACL,IAAK,uBACH,OAAO,EAAP,GACKpD,EADL,CAEEoD,iBAAiB,IAErB,QACE,OAAOpD,IKfT2E,KHTuB,eACzB3E,EADyB,uDACjBmE,EACRL,EAFyB,8CAGVH,EAAuCS,IAAvCT,CAAgD3D,EAAO8D,IGOpEc,SFV2B,eAC7B5E,EAD6B,uDACrBqE,EACRP,EAF6B,8CAI7BH,EAA+CW,IAA/CX,CAA4D3D,EAAO8D,IEOjEe,UDX4B,eAC9B7E,EAD8B,uDACtBuE,EACRT,EAF8B,8CAI9BH,EAAiDa,IAAjDb,CAA+D3D,EAAO8D,MCStEgB,OAAOC,8BACLD,OAAOC,6BAA6B,CAAEpF,KAAM,SCtBhDqF,cAEAC,SAASC,MAAQ,kB,OCGGC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,mBFID,kBACb,gBAAC,IAAD,CAAUC,MAAOA,GACf,gBAAC,IAAD,KACE,gBAACC,EAAD,UEPU,MAAST,SAASU,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5E,MAAK,SAAA6E,GACjCA,EAAaC,iB,gCE3IZ,IAAKzG,EAuBA0G,EAvBZ,oE,SAAY1G,K,qBAAAA,E,uBAAAA,E,UAAAA,M,cAuBA0G,O,iCAAAA,I,qBAAAA,I,yBAAAA,I,oBAAAA,M,sHCbCzB,EAMX,aAA+C,IAAnC0B,EAAkC,uDAAJ,GAAI,yBAL9CC,KAAO,GAKuC,KAJ9CxG,KAAO,GAIuC,KAH9CS,KAAO,GAGuC,KAF9CgG,IAAM,EAGJC,OAAOC,OAA8CC,KAAML,IAIlDM,EAAmC,CAC9C,CAAErH,IAAK,WAAY4D,KAAM,YACzB,CAAE5D,IAAK,SAAU4D,KAAM,UACvB,CAAE5D,IAAK,aAAc4D,KAAM,cAC3B,CAAE5D,IAAK,SAAU4D,KAAM,Y,8ECjBZqB,EAMX,aAA0C,IAA9B8B,EAA6B,uDAAJ,GAAI,yBALzCvG,KAAO,GAKkC,KAJzCwG,KAAO,GAIkC,KAHzCvB,SAAW,GAG8B,KAFzCwB,IAAM,EAGJC,OAAOC,OAAoCC,KAAML,K,8ECPxC5B,EAMX,aAA8C,IAAlC4B,EAAiC,uDAAJ,GAAI,yBAL7CvG,KAAO,GAKsC,KAJ7CS,KAAO,GAIsC,KAH7C+F,KAAO,GAGsC,KAF7CC,IAAM,EAGJC,OAAOC,OAA4CC,KAAML,K","file":"static/js/main.f0920d97.chunk.js","sourcesContent":["import { IRouteComponent, Routes } from 'models/App';\r\nimport React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\ninterface IRouterProps {\r\n  setSelectedRoute: (key: Routes) => void;\r\n  routes: IRouteComponent[];\r\n}\r\n\r\nexport default (props: IRouterProps) => (\r\n  <>\r\n    {props.routes.map((rc: IRouteComponent) => (\r\n      <Route path={rc.key} exact component={rc.component} key={rc.key} />\r\n    ))}\r\n    <Redirect to={Routes.Tags} />\r\n  </>\r\n);\r\n","import { IRouteComponent, Routes } from 'models/App';\r\nimport {\r\n  CommandBar,\r\n  DefaultPalette,\r\n  INavLink,\r\n  memoizeFunction,\r\n  mergeStyles,\r\n  Nav\r\n} from 'office-ui-fabric-react';\r\nimport React, { FC, MouseEvent, useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport { IState } from 'reducers/Root';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport Router from './Router';\r\n\r\nconst getNavLinks = memoizeFunction((routes: IRouteComponent[]) =>\r\n  routes.map(\r\n    ({ name, key, icon }: IRouteComponent): INavLink => ({\r\n      name,\r\n      key,\r\n      icon,\r\n      url: '',\r\n      link: key\r\n    })\r\n  )\r\n);\r\n\r\nconst mapStateToProps = (state: IState) => state.main;\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  onAddClick: () => dispatch({ type: 'onAddClick' }),\r\n  onEditClick: () => dispatch({ type: 'onEditClick' }),\r\n  onDeleteClick: () => dispatch({ type: 'onDeleteClick' }),\r\n  onRouteChange: () => dispatch({ type: 'onRouteChange' })\r\n});\r\n\r\ninterface IMainProps\r\n  extends RouteComponentProps,\r\n    ReturnType<typeof mapStateToProps>,\r\n    ReturnType<typeof mapDispatchToProps> {}\r\n\r\nconst Main: FC<IMainProps> = (props: IMainProps) => {\r\n  const [selectedRoute, setSelectedRoute] = useState(Routes.Tags);\r\n  const [routes, setRoutes] = useState([] as IRouteComponent[]);\r\n  const [headerName, setHeaderName] = useState('Tags');\r\n\r\n  useEffect(() => {\r\n    Promise.all([\r\n      import('./Tags/Tags'),\r\n      import('./Triggers/Triggers'),\r\n      import('./Variables/Variables')\r\n    ]).then(imports => setRoutes(imports.map(i => i.default)));\r\n  }, []);\r\n\r\n  const onLinkClick = (_?: MouseEvent, navLink?: INavLink) => {\r\n    props.history.push(navLink!.link);\r\n    setSelectedRoute(navLink!.link);\r\n    setHeaderName(navLink!.name);\r\n    props.onRouteChange();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header\r\n        className={mergeStyles({\r\n          textAlign: 'center',\r\n          borderBottom: '1px solid',\r\n          borderColor: DefaultPalette.neutralQuaternaryAlt\r\n        })}\r\n      >\r\n        <h1>MS TagM o'metry</h1>\r\n      </header>\r\n      <main\r\n        className={mergeStyles({\r\n          display: 'flex',\r\n          height: '100vh',\r\n          overflow: 'hidden'\r\n        })}\r\n      >\r\n        <aside\r\n          className={mergeStyles({\r\n            flexBasis: '12%',\r\n            borderRight: '1px solid',\r\n            borderColor: DefaultPalette.neutralQuaternaryAlt\r\n          })}\r\n        >\r\n          <Nav\r\n            groups={[{ links: getNavLinks(routes) }]}\r\n            selectedKey={selectedRoute}\r\n            onLinkClick={onLinkClick}\r\n          />\r\n        </aside>\r\n        <div\r\n          className={mergeStyles({\r\n            flex: 1,\r\n            borderBottom: '1px solid',\r\n            borderColor: DefaultPalette.neutralQuaternaryAlt\r\n          })}\r\n        >\r\n          <h2 className={mergeStyles({ paddingLeft: '34px' })}>{headerName}</h2>\r\n          <CommandBar\r\n            items={[\r\n              {\r\n                key: 'addRow',\r\n                text: 'Add',\r\n                iconProps: { iconName: 'Add' },\r\n                onClick: () => {\r\n                  props.onAddClick();\r\n                }\r\n              },\r\n              {\r\n                key: 'editRow',\r\n                text: 'Edit',\r\n                disabled: !props.hasSelectedItem,\r\n                iconProps: { iconName: 'Edit' },\r\n                onClick: () => {\r\n                  props.onEditClick();\r\n                }\r\n              },\r\n              {\r\n                key: 'deleteRow',\r\n                text: 'Delete',\r\n                disabled: !props.hasSelectedItem,\r\n                iconProps: { iconName: 'Trash' },\r\n                onClick: () => {\r\n                  props.onDeleteClick();\r\n                }\r\n              }\r\n            ]}\r\n          />\r\n          <Router\r\n            routes={routes}\r\n            setSelectedRoute={(key: Routes) => {\r\n              setSelectedRoute(key);\r\n              props.onRouteChange();\r\n            }}\r\n          />\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Main));\r\n","import { IMTMAction } from 'models/App';\r\n\r\nexport const InitialState = {\r\n  isAddPanelVisible: false,\r\n  isEditPanelVisible: false,\r\n  isDeleteConfirmationDialogVisible: false,\r\n  hasSelectedItem: false\r\n};\r\n\r\nexport type MainState = typeof InitialState;\r\n\r\nexport const MainReducer = (\r\n  state = InitialState,\r\n  action: IMTMAction\r\n): MainState => {\r\n  switch (action.type) {\r\n    case 'onAddClick':\r\n      return {\r\n        ...state,\r\n        isAddPanelVisible: true\r\n      };\r\n    case 'onEditClick':\r\n      return {\r\n        ...state,\r\n        isEditPanelVisible: true\r\n      };\r\n\r\n    case 'onItemSelection':\r\n      return {\r\n        ...state,\r\n        hasSelectedItem: true\r\n      };\r\n    case 'onRouteChange':\r\n    case 'onResetItemSelection':\r\n      return {\r\n        ...state,\r\n        hasSelectedItem: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { IMTMAction } from 'models/App';\r\nimport { IBase } from 'models/Common';\r\n\r\nconst emptyReducer = <S>(state: S, _: IMTMAction): S => state;\r\n\r\nexport const getCommonReducer = <T, S extends IBase<T>>(\r\n  C: new (item?: Partial<T>) => T,\r\n  additionalReducer = emptyReducer\r\n) => {\r\n  return (state: S, action: IMTMAction) => {\r\n    switch (action.type) {\r\n      case 'onItemSelection':\r\n        return {\r\n          ...state,\r\n          selectedItem: new C(action.payload)\r\n        };\r\n      case 'onRouteChange':\r\n      case 'onResetItemSelection':\r\n        return {\r\n          ...state,\r\n          selectedItem: new C()\r\n        };\r\n      case 'onAddClick':\r\n        return {\r\n          ...state,\r\n          panelData: new C(),\r\n          isPanelOpen: true\r\n        };\r\n      case 'onEditClick':\r\n        return {\r\n          ...state,\r\n          panelData: new C(state.selectedItem),\r\n          isPanelOpen: true\r\n        };\r\n      case 'onPanelDismiss':\r\n        return {\r\n          ...state,\r\n          isPanelOpen: false\r\n        };\r\n      case 'onDeleteClick':\r\n        return {\r\n          ...state,\r\n          isDeleteConfirmationDialogVisible: true\r\n        };\r\n      case 'onDeleteDialogDismiss':\r\n        return {\r\n          ...state,\r\n          isDeleteConfirmationDialogVisible: false\r\n        };\r\n      default:\r\n        return additionalReducer(state, action);\r\n    }\r\n  };\r\n};\r\n","import { IMTMAction } from 'models/App';\r\nimport { IBase } from 'models/Common';\r\nimport { ITagItem, TagItem } from 'models/Tags';\r\n\r\nimport { getCommonReducer } from './Common';\r\n\r\nexport interface ITagsState extends IBase<ITagItem> {}\r\n\r\nconst TagsInitialState: ITagsState = {\r\n  selectedItem: new TagItem(),\r\n  panelData: new TagItem(),\r\n  isPanelOpen: false,\r\n  isDeleteConfirmationDialogVisible: false\r\n};\r\n\r\nexport const TagsReducer = (\r\n  state = TagsInitialState,\r\n  action: IMTMAction\r\n): ITagsState => getCommonReducer<ITagItem, ITagsState>(TagItem)(state, action);\r\n","import { IMTMAction } from 'models/App';\r\nimport { IBase } from 'models/Common';\r\nimport { ITriggerItem, TriggerItem } from 'models/Triggers';\r\n\r\nimport { getCommonReducer } from './Common';\r\n\r\nexport interface ITriggersState extends IBase<ITriggerItem> {}\r\n\r\nconst TriggersInitialState: ITriggersState = {\r\n  selectedItem: new TriggerItem(),\r\n  panelData: new TriggerItem(),\r\n  isPanelOpen: false,\r\n  isDeleteConfirmationDialogVisible: false\r\n};\r\n\r\nexport const TriggersReducer = (\r\n  state = TriggersInitialState,\r\n  action: IMTMAction\r\n): ITriggersState =>\r\n  getCommonReducer<ITriggerItem, ITriggersState>(TriggerItem)(state, action);\r\n","import { IMTMAction } from '../models/App';\r\nimport { IBase } from '../models/Common';\r\nimport { IVariableItem, VariableItem } from '../models/Variables';\r\n\r\nimport { getCommonReducer } from './Common';\r\n\r\nexport interface IVariablesState extends IBase<IVariableItem> {}\r\n\r\nconst VariablesInitialState: IVariablesState = {\r\n  selectedItem: new VariableItem(),\r\n  panelData: new VariableItem(),\r\n  isPanelOpen: false,\r\n  isDeleteConfirmationDialogVisible: false\r\n};\r\n\r\nexport const VariablesReducer = (\r\n  state = VariablesInitialState,\r\n  action: IMTMAction\r\n): IVariablesState =>\r\n  getCommonReducer<IVariableItem, IVariablesState>(VariableItem)(state, action);\r\n","import { combineReducers, createStore } from 'redux';\r\n\r\nimport { MainReducer, MainState } from './Main';\r\nimport { ITagsState, TagsReducer } from './Tags';\r\nimport { ITriggersState, TriggersReducer } from './Triggers';\r\nimport { IVariablesState, VariablesReducer } from './Variables';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION__: Function;\r\n  }\r\n}\r\n\r\nexport interface IState {\r\n  main: MainState;\r\n  tags: ITagsState;\r\n  triggers: ITriggersState;\r\n  variables: IVariablesState;\r\n}\r\n\r\n/* tslint:disable-next-line:no-any */\r\nexport default createStore<IState, any, any, any>(\r\n  combineReducers<IState>({\r\n    main: MainReducer,\r\n    tags: TagsReducer,\r\n    triggers: TriggersReducer,\r\n    variables: VariablesReducer\r\n  }),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__({ name: 'MTM' })\r\n);\r\n","import AppStart from \"components/AppStart\";\nimport { initializeIcons } from \"office-ui-fabric-react\";\nimport * as React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport store from \"reducers/Root\";\n\ninitializeIcons();\n\ndocument.title = \"MS TagM o'metry\";\n\nexport default () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <AppStart />\n    </BrowserRouter>\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export enum Routes {\r\n  Triggers = '/triggers',\r\n  Variables = '/variables',\r\n  Tags = '/'\r\n}\r\n\r\nexport interface IRouteComponent {\r\n  key: Routes;\r\n  name: string;\r\n  component: React.ComponentClass | React.FC;\r\n  icon: string;\r\n}\r\n\r\n/* tslint:disable-next-line:no-any */\r\nexport interface IMTMAction<P = any> {\r\n  type: string;\r\n  payload?: P;\r\n}\r\n\r\nexport interface IWithId {\r\n  id: number;\r\n}\r\n\r\nexport enum Status {\r\n  NotYetStarted,\r\n  Loading,\r\n  Completed,\r\n  Failed\r\n}\r\n","import { IDropdownOption } from 'office-ui-fabric-react';\r\n\r\nimport { IWithId } from './App';\r\n\r\nexport interface IVariableItem extends IWithId {\r\n  body: string;\r\n  name: string;\r\n  type: string;\r\n}\r\n\r\nexport class VariableItem implements IVariableItem {\r\n  body = '';\r\n  name = '';\r\n  type = '';\r\n  id = -1;\r\n\r\n  constructor(obj: Partial<IVariableItem> = {}) {\r\n    Object.assign<IVariableItem, Partial<IVariableItem>>(this, obj);\r\n  }\r\n}\r\n\r\nexport const VariableTypes: IDropdownOption[] = [\r\n  { key: 'function', text: 'FUNCTION' },\r\n  { key: 'custom', text: 'CUSTOM' },\r\n  { key: 'data_layer', text: 'DATA_LAYER' },\r\n  { key: 'cookie', text: 'COOKIE' }\r\n];\r\n","import { IWithId } from './App';\r\n\r\nexport interface ITagItem extends IWithId {\r\n  name: string;\r\n  body: string;\r\n  triggers: number[];\r\n}\r\n\r\nexport class TagItem implements ITagItem {\r\n  name = '';\r\n  body = '';\r\n  triggers = [];\r\n  id = -1;\r\n\r\n  constructor(obj: Partial<ITagItem> = {}) {\r\n    Object.assign<ITagItem, Partial<ITagItem>>(this, obj);\r\n  }\r\n}\r\n","import { IWithId } from './App';\r\n\r\nexport interface ITriggerItem extends IWithId {\r\n  name: string;\r\n  type: string;\r\n  body: string;\r\n}\r\n\r\nexport class TriggerItem implements ITriggerItem {\r\n  name = '';\r\n  type = '';\r\n  body = '';\r\n  id = -1;\r\n\r\n  constructor(obj: Partial<ITriggerItem> = {}) {\r\n    Object.assign<ITriggerItem, Partial<ITriggerItem>>(this, obj);\r\n  }\r\n}\r\n"],"sourceRoot":""}