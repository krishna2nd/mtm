{"version":3,"sources":["constants/Endpoints.ts","service/Api.ts","components/Presentational/MTMPanel.tsx","components/Presentational/MTMList.tsx","Utils.ts","components/Presentational/MTMTextField.tsx","components/Tags/TagPanel.tsx","components/Tags/Tags.tsx"],"names":["Triggers","Tags","Variables","TriggersWithId","id","TagsWithId","VariablesWithId","headers","getList","url","C","fetch","method","then","response","json","map","item","createItem","body","JSON","stringify","updateItem","getTagsList","Endpoints","TagItem","saveTagItem","tagItem","getTriggersList","TriggerItem","saveTriggerItem","triggerItem","getVariablesList","VariableItem","saveVariablesItem","variablesItem","renderFooterContent","props","style","display","justifyContent","onClick","isActionInProgress","undefined","onSaveClick","styles","root","width","disabled","isFormValid","size","SpinnerSize","small","label","labelPosition","color","DefaultPalette","white","fontSize","FontSizes","medium","fontWeight","FontWeights","semibold","onCancelClick","connect","dispatch","type","isOpen","closeButtonAriaLabel","headerText","onDismiss","onRenderFooterContent","content","getColumns","memoizeFunction","partialColumns","partialColumn","index","key","toString","maxWidth","minWidth","minColumnWidth","isResizable","setSelectedItem","payload","resetSelectedItems","selection","Selection","onSelectionChanged","selectedItem","getSelection","items","className","columns","layoutMode","DetailsListLayoutMode","fixedColumns","selectionPreservedOnEmptyClick","selectionMode","SelectionMode","single","DefaultWaitTime","debounce","func","timeout","wait","immediate","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","TextField","onChange","_","newValue","onValueChange","TagPanel","useState","name","setName","setBody","triggers","join","setTriggers","Status","NotYetStarted","saveStatus","setSaveStatus","MTMTextField","maxLength","value","required","rows","multiline","MTMPanel","Loading","split","s","Number","trim","filter","n","isNaN","Completed","catch","Failed","fieldName","onRender","isMultiline","component","state","tags","setItems","useEffect","MTMList","isPanelOpen","panelData","icon","Routes"],"mappings":"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","file":"static/js/4.06d52240.chunk.js","sourcesContent":["// const HostPrefix = \"https://ms-tagmanager.azurewebsites.net\";\r\nconst HostPrefix = \"\";\r\n\r\nexport const Triggers = `${HostPrefix}/triggers`;\r\nexport const Tags = `${HostPrefix}/tags`;\r\nexport const Variables = `${HostPrefix}/variables`;\r\n\r\nexport const TriggersWithId = (id: number) => `${Triggers}/${id}`;\r\nexport const TagsWithId = (id: number) => `${Tags}/${id}`;\r\nexport const VariablesWithId = (id: number) => `${Variables}/${id}`;\r\n","import * as Endpoints from \"../constants/Endpoints\";\r\nimport { ITagItem, TagItem } from \"../models/Tags\";\r\nimport { IVariableItem, VariableItem } from \"../models/Variables\";\r\nimport { TriggerItem, ITriggerItem } from \"../models/Triggers\";\r\nimport { IWithId } from \"../models/App\";\r\n\r\nconst headers = {\r\n  \"Content-Type\": \"application/json\"\r\n};\r\n\r\nconst getList = <T>(url: string, C: new (item: T) => T) =>\r\n  fetch(url, { method: \"GET\" })\r\n    .then(response => response.json())\r\n    .then(response => (response as T[]).map((item: T) => new C(item)));\r\n\r\nconst deleteItem = (url: string) =>\r\n  fetch(url, {\r\n    method: \"DELETE\",\r\n    headers\r\n  });\r\n\r\nconst createItem = <T extends IWithId>(url: string, item: T) => {\r\n  delete item.id;\r\n  return fetch(url, {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(item)\r\n  });\r\n};\r\n\r\nconst updateItem = <T>(url: string, item: T) =>\r\n  fetch(url, {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(item)\r\n  });\r\n\r\n/* Tags */\r\nexport const getTagsList = () => getList<ITagItem>(Endpoints.Tags, TagItem);\r\n\r\nexport const deleteTagItem = (id: number) =>\r\n  deleteItem(Endpoints.TagsWithId(id));\r\n\r\nexport const saveTagItem = (tagItem: ITagItem) => {\r\n  if (tagItem.id === -1) {\r\n    return createItem<ITagItem>(Endpoints.Tags, tagItem);\r\n  }\r\n  return updateItem<ITagItem>(Endpoints.TagsWithId(tagItem.id), tagItem);\r\n};\r\n\r\n/* Triggers */\r\nexport const getTriggersList = () =>\r\n  getList<ITriggerItem>(Endpoints.Triggers, TriggerItem);\r\n\r\nexport const deleteTriggersItem = (id: number) =>\r\n  deleteItem(Endpoints.TriggersWithId(id));\r\n\r\nexport const saveTriggerItem = (triggerItem: ITriggerItem) => {\r\n  if (triggerItem.id === -1) {\r\n    return createItem<ITriggerItem>(Endpoints.Triggers, triggerItem);\r\n  }\r\n  return updateItem<ITriggerItem>(\r\n    Endpoints.TriggersWithId(triggerItem.id),\r\n    triggerItem\r\n  );\r\n};\r\n\r\n/* Variables */\r\nexport const getVariablesList = () =>\r\n  getList<IVariableItem>(Endpoints.Variables, VariableItem);\r\n\r\nexport const deleteVariablesItem = (id: number) =>\r\n  deleteItem(Endpoints.VariablesWithId(id));\r\n\r\nexport const saveVariablesItem = (variablesItem: ITriggerItem) => {\r\n  if (variablesItem.id === -1) {\r\n    return createItem<IVariableItem>(Endpoints.Variables, variablesItem);\r\n  }\r\n  return updateItem<IVariableItem>(\r\n    Endpoints.VariablesWithId(variablesItem.id),\r\n    variablesItem\r\n  );\r\n};\r\n","import {\r\n  PrimaryButton,\r\n  DefaultButton,\r\n  Panel,\r\n  Spinner,\r\n  SpinnerSize,\r\n  FontSizes,\r\n  DefaultPalette,\r\n  FontWeights\r\n} from \"office-ui-fabric-react\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  onCancelClick: () => dispatch({ type: \"onCancelClick\" })\r\n});\r\n\r\ninterface IMTMPanelProps extends ReturnType<typeof mapDispatchToProps> {\r\n  headerText: string;\r\n  isFormValid: boolean;\r\n  isActionInProgress: boolean;\r\n  content: JSX.Element;\r\n  onSaveClick(): void;\r\n}\r\n\r\nconst MTMPanel: React.FC<IMTMPanelProps> = (props: IMTMPanelProps) => (\r\n  <Panel\r\n    isOpen\r\n    closeButtonAriaLabel=\"Close\"\r\n    headerText={props.headerText}\r\n    onDismiss={props.onCancelClick}\r\n    onRenderFooterContent={() => renderFooterContent(props)}\r\n  >\r\n    {props.content}\r\n  </Panel>\r\n);\r\n\r\nconst renderFooterContent = (props: IMTMPanelProps) => (\r\n  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n    <PrimaryButton\r\n      onClick={props.isActionInProgress ? undefined : props.onSaveClick}\r\n      styles={{ root: { width: 110 } }}\r\n      disabled={!props.isFormValid}\r\n    >\r\n      {props.isActionInProgress ? (\r\n        <Spinner\r\n          size={SpinnerSize.small}\r\n          label={\"Saving...\"}\r\n          labelPosition={\"left\"}\r\n          styles={{\r\n            label: {\r\n              color: DefaultPalette.white,\r\n              fontSize: FontSizes.medium,\r\n              fontWeight: FontWeights.semibold\r\n            }\r\n          }}\r\n        />\r\n      ) : (\r\n        \"Save\"\r\n      )}\r\n    </PrimaryButton>\r\n    <DefaultButton onClick={props.onCancelClick}>Cancel</DefaultButton>\r\n  </div>\r\n);\r\n\r\nexport default connect(null, mapDispatchToProps)(MTMPanel);\r\n","import {\r\n  DetailsList,\r\n  DetailsListLayoutMode,\r\n  SelectionMode,\r\n  IColumn,\r\n  Selection,\r\n  memoizeFunction\r\n} from \"office-ui-fabric-react\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  setSelectedItem: (item: any) =>\r\n    dispatch({ type: \"onItemSelection\", payload: item }),\r\n  resetSelectedItems: () => dispatch({ type: \"onResetItemSelection\" })\r\n});\r\n\r\nexport type PartialColumn = Pick<\r\n  IColumn,\r\n  \"name\" | \"fieldName\" | \"onRender\" | \"isMultiline\"\r\n> & {\r\n  minColumnWidth?: number;\r\n};\r\ninterface IMTMListProps<T> extends ReturnType<typeof mapDispatchToProps> {\r\n  items: T[];\r\n  columns: PartialColumn[];\r\n}\r\n\r\nfunction MTMList<T>(props: IMTMListProps<T>) {\r\n  const selection = new Selection({\r\n    onSelectionChanged: () => {\r\n      const selectedItem = selection.getSelection()[0];\r\n      if (selectedItem) {\r\n        props.setSelectedItem(selectedItem as T);\r\n      } else {\r\n        props.resetSelectedItems();\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <DetailsList\r\n      items={props.items}\r\n      className={\"table-border\"}\r\n      columns={getColumns(props.columns)}\r\n      layoutMode={DetailsListLayoutMode.fixedColumns}\r\n      selectionPreservedOnEmptyClick\r\n      selectionMode={SelectionMode.single}\r\n      selection={selection}\r\n    />\r\n  );\r\n}\r\n\r\nconst getColumns = memoizeFunction(\r\n  (partialColumns: PartialColumn[]): IColumn[] =>\r\n    partialColumns.map((partialColumn: PartialColumn, index: number) => ({\r\n      key: index.toString(),\r\n      maxWidth: 300,\r\n      minWidth: partialColumn.minColumnWidth || 300,\r\n      isResizable: true,\r\n      ...partialColumn\r\n    }))\r\n);\r\n\r\nexport default connect(null, mapDispatchToProps)(MTMList);\r\n","const DefaultWaitTime = 200;\r\n\r\nexport function debounce(\r\n  func: any,\r\n  wait = DefaultWaitTime,\r\n  immediate = false\r\n): () => void {\r\n  let timeout: NodeJS.Timeout;\r\n  return function(this: any): void {\r\n    const context = this;\r\n    const args = arguments;\r\n    const later = () => {\r\n      if (!immediate) {\r\n        func.apply(context, args);\r\n      }\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) {\r\n      func.apply(context, args);\r\n    }\r\n  };\r\n}\r\n","import { ITextFieldProps, TextField } from \"office-ui-fabric-react\";\r\nimport React from \"react\";\r\nimport { debounce } from \"../../Utils\";\r\n\r\ninterface IMTMTextFieldProps extends ITextFieldProps {\r\n  onValueChange?(newValue: string): void;\r\n}\r\n\r\nexport default (props: IMTMTextFieldProps) => {\r\n  const onValueChange = (_: React.FormEvent, newValue = \"\") => {\r\n    if (props.onValueChange) {\r\n      props.onValueChange(newValue);\r\n    }\r\n  };\r\n  return <TextField {...props} onChange={debounce(onValueChange)} />;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { ITagItem } from \"../../models/Tags\";\r\nimport { Status } from \"../../models/App\";\r\nimport MTMPanel from \"../Presentational/MTMPanel\";\r\nimport MTMTextField from \"../Presentational/MTMTextField\";\r\nimport { saveTagItem } from \"../../service/Api\";\r\n\r\ninterface ITagPanelProps extends ITagItem {}\r\n\r\nconst TagPanel: React.FC<ITagPanelProps> = (props: ITagPanelProps) => {\r\n  const [name, setName] = useState(props.name);\r\n  const [body, setBody] = useState(props.body);\r\n  const [triggers, setTriggers] = useState(props.triggers.join(\", \"));\r\n  const [saveStatus, setSaveStatus] = useState(Status.NotYetStarted);\r\n\r\n  const onSaveClick = () => {\r\n    setSaveStatus(Status.Loading);\r\n    const tagItem = {\r\n      name,\r\n      body,\r\n      id: props.id,\r\n      triggers: triggers\r\n        .split(\",\")\r\n        .map(s => Number(s.trim()))\r\n        .filter(n => n && !isNaN(n))\r\n    };\r\n    saveTagItem(tagItem)\r\n      .then(() => setSaveStatus(Status.Completed))\r\n      .catch(() => setSaveStatus(Status.Failed));\r\n  };\r\n\r\n  const content = (\r\n    <>\r\n      <MTMTextField\r\n        label={\"Name\"}\r\n        maxLength={50}\r\n        value={name}\r\n        onValueChange={setName}\r\n        required\r\n      />\r\n      <MTMTextField\r\n        label={\"Triggers\"}\r\n        maxLength={50}\r\n        value={triggers}\r\n        onValueChange={setTriggers}\r\n      />\r\n      <MTMTextField\r\n        label={\"Body\"}\r\n        value={body}\r\n        onValueChange={setBody}\r\n        rows={4}\r\n        multiline\r\n      />\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <MTMPanel\r\n      headerText={props.id === -1 ? \"Add Tag\" : \"Edit Tag\"}\r\n      onSaveClick={onSaveClick}\r\n      content={content}\r\n      isActionInProgress={saveStatus === Status.Loading}\r\n      isFormValid\r\n    />\r\n  );\r\n};\r\n\r\nexport default TagPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Routes, IRouteComponent } from \"../../models/App\";\r\nimport { connect } from \"react-redux\";\r\nimport { IState } from \"../../reducers/Root\";\r\nimport TagPanel from \"./TagPanel\";\r\nimport { ITagsState } from \"../../reducers/Tags\";\r\nimport { ITagItem } from \"../../models/Tags\";\r\nimport MTMList, { PartialColumn } from \"../Presentational/MTMList\";\r\nimport { getTagsList } from \"../../service/Api\";\r\n\r\nconst columns: PartialColumn[] = [\r\n  {\r\n    name: \"Name\",\r\n    fieldName: \"name\"\r\n  },\r\n  {\r\n    name: \"Firing Triggers\",\r\n    onRender: (item: ITagItem) => item.triggers.join(\", \")\r\n  },\r\n  {\r\n    name: \"Body\",\r\n    fieldName: \"body\",\r\n    isMultiline: true,\r\n    minColumnWidth: 500\r\n  }\r\n];\r\n\r\nconst mapStateToProps = (state: IState) => state.tags;\r\n\r\ninterface ITagsProps extends ITagsState {}\r\n\r\nconst Tags: React.FC<ITagsProps> = (props: ITagsProps) => {\r\n  const [items, setItems] = useState([] as ITagItem[]);\r\n\r\n  const fetchItems = () => {\r\n    getTagsList().then(setItems);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <MTMList items={items} columns={columns} />\r\n      {props.isPanelOpen && <TagPanel {...props.panelData} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default {\r\n  name: \"Tags\",\r\n  component: connect(mapStateToProps)(Tags),\r\n  icon: \"Tag\",\r\n  key: Routes.Tags\r\n} as IRouteComponent;\r\n"],"sourceRoot":""}